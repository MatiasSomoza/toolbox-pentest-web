"""
Utility Python3 script to manually alter a JWT token claims/headers in order to manually inspect the behavior of a service validating/using the token.

Useful to analyze specific cases returning a different/strange response content/code/length during the application of the 
Attack Methodology created by TICARPI's JWT tool. 

Dependencies:
    pip install requests pyjwt

References:
    https://pyjwt.readthedocs.io/en/stable/usage.html
    https://github.com/ticarpi/jwt_tool/wiki/Attack-Methodology
    https://github.com/righettod/toolbox-pentest-web/blob/master/docs/README.md#audit-jwt-token
"""

import requests
import jwt

# Context
original_token = "eyJh....."
test_service_url = "https://server.com/api/users"

# Extract part of the original token
parts = original_token.split(".")
header_original = parts[0]
payload_original = parts[1]
signature = parts[2]
payload = jwt.decode(original_token, options={"verify_signature": False})

# Update the token claims
print("[+] Token alteration:")
print(payload["iss"])
payload["iss"] = "TEST"
print(payload["iss"])

# ReAssemble the token
token = jwt.encode(payload, "secret")
p = token.split(".")
p[0] = header_original
p[2] = signature
altered_token = ".".join(p)

# Test the Original and the Modified tokens against the test service
print("[+] Token test against the test service:")
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)
proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}  # to inspect the reply and perform operation like client cert auth...
ua = "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0"
session = requests.Session()
session.verify = False
session.proxies.update(proxies)
h = {"User-Agent": ua, "Authorization": f"Bearer {altered_token}"}
resp = session.get(test_service_url, headers=h)
print(f"Test with the modified jwt token HTTP RC: {resp.status_code}")
session.cookies.clear()
h["Authorization"] = f"Bearer {original_token}"
resp = session.get(test_service_url, headers=h)
print(f"Test with the original jwt token HTTP RC: {resp.status_code}")
