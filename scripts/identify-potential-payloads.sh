#!/bin/bash
############################################################################
# Script to identify classes used by YSOSERIAL payloads that are present
# into the libs used by the applications
############################################################################
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
    echo "Usage:"
    echo "   $script_name [APP_LIBS_FOLDER]"
    echo ""
    echo "Call example:"
    echo "    $script_name /tmp/app-jars"
    exit 1
fi
# 1) Set here the folder path in which all the JAR files of the app were copied 
# 2) When possible: Include also the JAR files of the JRE that will be used 
#                   by the application at runtime
APP_LIBS_FOLDER=$1
#
YSOSERIAL_SRC="/tmp/ysoserial"
WORK_FILE="imported-classes.txt"
CLASSES_FILE="available-classes.txt"
POTENTIAL_APPLICABLE_PAYLOAD="applicable-payload.txt"
unset _JAVA_OPTIONS
echo -e "\e[93m[+] Init\e[0m"
rm master.zip 2>/dev/null
rm $POTENTIAL_APPLICABLE_PAYLOAD 2>/dev/null
rm $WORK_FILE 2>/dev/null
rm -rf $YSOSERIAL_SRC 2>/dev/null
rm $CLASSES_FILE 2>/dev/null
echo -e "\e[93m[+] Download the source code of YSOSERIAL...\e[0m"
wget -q https://github.com/frohoff/ysoserial/archive/master.zip
unzip -q -d $YSOSERIAL_SRC master.zip
echo -e "\e[93m[+] Gather the list of all available classes in app libs...\e[0m"
for lib in $APP_LIBS_FOLDER/*.jar
do
    jar tf $lib >> $CLASSES_FILE
done
cat $CLASSES_FILE | sort -u > $CLASSES_FILE.tmp
mv $CLASSES_FILE.tmp $CLASSES_FILE
echo -e "\e[93m[+] Search for the presence of payloads imports in app libs...\e[0m"
for payload in $YSOSERIAL_SRC/ysoserial-master/src/main/java/ysoserial/payloads/*.java
do 
    payload_class_name="$(basename $payload)"
    echo -n "  [+] Analyzing payload: '$payload_class_name'..."
    grep "import " $payload | grep -v "ysoserial\." | cut -d':' -f2 | cut -d' ' -f2 | tr -d ";" | tr -d "*" | sort -u > $WORK_FILE
    sed -e 's/\./\//g' < $WORK_FILE > $WORK_FILE.tmp
    mv $WORK_FILE.tmp $WORK_FILE
    payload_imports_total_count=`wc -l $WORK_FILE | cut -d' ' -f1`
    # Search for the presence of its imports in the list of all available classes...
    # To be valid all imports of a payload must be found
    payload_imports_found_count=0
    while IFS= read -r import_class
    do
            hits=`grep -c "$import_class.class" $CLASSES_FILE`
            payload_imports_found_count=$(( payload_imports_found_count + hits ))
      
    done < "$WORK_FILE"
    if [ $payload_imports_found_count -eq $payload_imports_total_count ]
    then
        echo -e "\e[32mAll its imports are present ($payload_imports_total_count)\e[0m"
        echo $payload_class_name >> $POTENTIAL_APPLICABLE_PAYLOAD 
    else
        echo ""
    fi    
done
echo -e "\e[93m[+] Potential payloads applicable based on app libs\e[0m"
if [ -f "$POTENTIAL_APPLICABLE_PAYLOAD" ] 
then
    cat $POTENTIAL_APPLICABLE_PAYLOAD | sort -u | sed -e 's/\.java//g'
else
    echo -e "\e[91mNone found!\e[0m"
fi
echo -e "\e[93m[+] Cleanup\e[0m"
rm master.zip 2>/dev/null
rm $POTENTIAL_APPLICABLE_PAYLOAD 2>/dev/null
rm $WORK_FILE 2>/dev/null
rm -rf $YSOSERIAL_SRC 2>/dev/null
rm $CLASSES_FILE 2>/dev/null
exit 0