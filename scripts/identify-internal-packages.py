"""
Simple script to analyse a "package.json" / "pom.xml" descriptor 
and list packages not present in NPM/Maven online official registry

It leverage the data provided by the Google site "https://deps.dev/".

Dependency: pip install requests
"""
import requests
import json
import sys
import xml.etree.ElementTree as ET


def list_packages_npm(json_content):
    packages = []
    for pkg_name in json_content["dependencies"].keys():
        if pkg_name not in packages:
            packages.append(pkg_name)
    if "devDependencies" in json_content:
        for pkg_name in json_content["devDependencies"].keys():
            if pkg_name not in packages:
                packages.append(pkg_name)
    return packages


def list_packages_maven(xml_content):
    namespaces = {"mvn": "http://maven.apache.org/POM/4.0.0"}
    dependencies = []
    root = ET.fromstring(xml_content)
    dep_nodes = root.findall(".//mvn:dependency", namespaces)
    for dep_node in dep_nodes:
        group_id = dep_node.find("mvn:groupId", namespaces).text
        artifact_id = dep_node.find("mvn:artifactId", namespaces).text
        pkg_name = f"{group_id}:{artifact_id}"
        if pkg_name not in dependencies:
            dependencies.append(pkg_name)
    dep_nodes = root.findall(".//mvn:plugin", namespaces)
    for dep_node in dep_nodes:
        group_id = dep_node.find("mvn:groupId", namespaces).text
        artifact_id = dep_node.find("mvn:artifactId", namespaces).text
        pkg_name = f"{group_id}:{artifact_id}"
        if pkg_name not in dependencies:
            dependencies.append(pkg_name)
    return dependencies


def find_package_absent_from_registry(pkg_names_list, registry_name):
    absent = []
    with requests.Session() as session:
        for pkg_name in pkg_names_list:
            print(f"\rPackage {pkg_name:<75}", end="", flush=True)
            name_encoded = pkg_name.replace(
                "/", "%2F").replace("@", "%40").replace(":", "%3A")
            response = session.get(
                url=f"https://deps.dev/_/s/{registry_name}/p/{name_encoded}/versions")
            if len(response.json()["versions"]) == 0:
                absent.append(pkg_name)
    absent.sort()
    return absent


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Syntax: {sys.argv[0]} package.json")
        print(f"        {sys.argv[0]} pom.xml")
        sys.exit(1)
    descriptor_name = sys.argv[1]
    with open(descriptor_name, "r") as f:
        if descriptor_name.endswith(".json"):
            content = json.load(f)
            registry_name = "npm"
        elif descriptor_name.endswith(".xml"):
            content = f.read()
            registry_name = "maven"
        else:
            print("XML or JSON file expected!")
            sys.exit(1)
    print("[+] Extract the list of packages...")
    if registry_name == "npm":
        pkg_names_list = list_packages_npm(content)
    else:
        pkg_names_list = list_packages_maven(content)
    print(f"{len(pkg_names_list)} packages identified.")
    print(
        f"[+] Verify presence in the official {registry_name.upper()} registry...")
    absents = find_package_absent_from_registry(pkg_names_list, registry_name)
    if(len(absents)) == 0:
        print(f"\r{'[V] All packages are present.':<75}")
    else:
        print(f"\r{'[!] The following packages are absent:':<75}")
        print("\n".join(absents))
    sys.exit(len(absents))
