#!/bin/bash
###########################################################################################################
# Script to perform discovery of internal DNS ZONE via brute forcing against
# each authoritative name servers responsible for the domain.
#
# System dependencies to install via the package manager:
#   apt install dnsutils
###########################################################################################################
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
    echo "Usage:"
    echo "   $script_name [DOMAIN]"
    echo ""
    echo "Call example:"
    echo "    $script_name righettod.eu"
    exit 1
fi
domain=$1

function write_step (){
    echo -e "\e[93m[+] $1\e[0m"
}

seclists_dict="/tools/sec-lists/Discovery/Web-Content/raft-large-words.txt"
work_ns_file="/tmp/ns.txt"
work_dict_file="/tmp/dict.txt"
write_step "Tune the SecLists dictionary '$(basename $seclists_dict)'..."
cat $seclists_dict | grep -Ev "(\.|_)" | uniq > $work_dict_file
seclists_dict_entries_count=$(wc -l $work_dict_file | cut -d' ' -f1)
echo "$seclists_dict_entries_count entries."
write_step "Get the list of the authoritative name servers responsible for the domain '$domain'..."
dig -t NS +short $domain | sort -u > $work_ns_file
cat $work_ns_file
write_step "Brute force internal DNS Zone name using the adapted dictionary..."
while IFS= read -r ns_server
do
	while IFS= read -r word
	do
		printf "\r%-80s" ">>> Name server: $ns_server - Zone name: $word"
		zone_transfer_info=$(dig axfr $word @$ns_server 2>/dev/null)
		has_results=$(echo $zone_transfer_info | grep -cE "XFR\ssize:\s[0-9]+\srecords")
		if [ $has_results -ne 0 ];
		then
			echo ""
			dig axfr $word @$ns_server +noall +answer
		fi
	done < $work_dict_file
done < $work_ns_file
printf "\r%-80s" " "
echo ""
write_step "Cleanup."
rm $work_ns_file $work_dict_file
