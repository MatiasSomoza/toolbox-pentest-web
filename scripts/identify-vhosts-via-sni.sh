#!/bin/bash
###########################################################################################################
# Script to perform discovery of Virtual Hosts (VHOSTS) via TLS Server Name Indication (SNI).
#
# References:
#	https://man7.org/linux/man-pages/man1/timeout.1.html
#	https://stackoverflow.com/a/52464142
#	https://www.cloudflare.com/learning/ssl/what-is-sni/
#
# System dependencies to install via the package manager:
#   apt install openssl coreutils
###########################################################################################################
###
# Context tunning
SECLISTS_DICTS=("Discovery/DNS/namelist.txt")
TOP_LEVEL_DOMAINS=("lu" "be" "fr" "de" "com")
# Utilities functions
function write_step(){
    echo -e "\e[93m[+] $1\e[0m"
}
function test_server_name(){
	out=$(timeout $1 openssl s_client -nbio -async -no-CAfile -no-CApath -no-CAstore -no_check_time -ignore_unexpected_eof -ign_eof -ignore_critical -brief -connect $2 -servername $3 2>&1)
	server_name_exists=$(echo "$out" | grep "Peer certificate" | grep -iFc "$3")
	return $server_name_exists
}
# Constants
WAIT_DELAY=0.5
RESULT_FILE="/tmp/results.tmp"
# Entry point
if [ "$#" -lt 1 ]; then
    script_name=$(basename "$0")
    echo "Usage:"
    echo "   $script_name [IP:PORT]"
    echo ""
    echo "Call example:"
    echo "    $script_name 10.10.10.10:443"
    echo "    $script_name 10.10.10.10:8443"	
    exit 1
fi
target=$1
echo "" > $RESULT_FILE
write_step "Launch the discovery operation..."
for dict in ${SECLISTS_DICTS[@]}; do
	dict_path="/tools/sec-lists/$dict"
	dict_name=$(basename "$dict_path")	
	for top_level_domain in ${TOP_LEVEL_DOMAINS[@]}; do
		for line in $(cat $dict_path); do
			server_name="$line.$top_level_domain"
			data=$(cat $RESULT_FILE | tr '\n' ',' | cut -c2-)
			printf "\rTesting %-30s ==> VHost identified: %s" "$server_name" "$data"
			test_server_name $WAIT_DELAY "$target" "$server_name"			
			rc=$?			
			if [[ $rc -ne 0 ]]
			then
				already_identified=$(grep -ic "$server_name" $RESULT_FILE)
				if [[ $already_identified -eq 0 ]]
				then
					echo $server_name >> $RESULT_FILE
				fi		
			fi
		done
	done
done
echo ""
write_step "Cleanup..."
rm $RESULT_FILE

