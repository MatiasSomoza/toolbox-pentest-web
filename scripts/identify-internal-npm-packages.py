"""
Simple script to analyse a "package.json" descriptor 
and list packages not present in NPM online registry "https://www.npmjs.com/".

It leverage the data provided by the Google site "https://deps.dev/".

Dependency: pip install requests
"""
import requests
import json
import sys

def list_packages(json_content):
    packages = []
    for pkg_name in json_content["dependencies"].keys():
        if pkg_name not in packages:
            packages.append(pkg_name)
    if "devDependencies" in json_content:
        for pkg_name in json_content["devDependencies"].keys():
            if pkg_name not in packages:
                packages.append(pkg_name)        
    return packages

def find_package_absent_from_registry(pkg_names_list):
    absent = []
    with requests.Session() as session:
        for pkg_name in pkg_names_list:
                print(f"\rPackage {pkg_name:<50}", end="", flush=True)
                name_encoded = pkg_name.replace("/","%2F").replace("@","%40")
                response = session.get(url=f"https://deps.dev/_/s/npm/p/{name_encoded}/versions")
                if len(response.json()["versions"]) == 0:
                    absent.append(pkg_name)
    absent.sort()
    print("\r", end="", flush=True)
    return absent

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"Syntax: {sys.argv[0]} package.json")
        sys.exit(1)        
    with open(sys.argv[1], "r") as f:
        json_content = json.load(f)
    print("[+] Extract the list of packages...")
    pkg_names_list = list_packages(json_content)
    print(f"{len(pkg_names_list)} packages identified.")
    print("[+] Verify presence in the NPM registry...")
    absents = find_package_absent_from_registry(pkg_names_list)
    if(len(absents)) == 0:
        print("All packages are present.") 
    else:
        print(f"The following packages are absent: {absents}")
    sys.exit(len(absents))