#!/usr/bin/python3
import requests
import hashlib
import argparse
from termcolor import colored
from tabulate import tabulate
from urllib.parse import urlparse

"""
Script to detect the presence of cases for which the HTTP request header "Host" can be abused.

Based on the following training: https://portswigger.net/web-security/host-header/exploiting

Requests module and CURL do not support sending 2 occurence of the "Host" header so the following tests 
must be performed manually via BURP:
- Inject duplicate Host headers
- Add line wrapping

Dependencies:
    pip3 install requests termcolor tabulate
"""

# Config
## Disable TLS warning when validation is disabled when requests is used
requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

# Constants 
## Define proxy to debug request sent using requests
PROXIES = { }
## Collection of headers used to override the "Host" header
OVERRIDE_HEADERS = ["X-Forwarded-Host", "X-Host", "X-Forwarded-Server", "X-HTTP-Host-Override", "Forwarded", "X-Original-Host", "X-Original-Remote-Addr", "X-Remote-Addr"]

class ResponseData:
    def __init__(self, response):
        self.return_code = response.status_code
        self.body_length = len(response.text)
        self.body_content_hash = hashlib.sha1(response.text.encode("utf-8")).hexdigest()
        content = ""
        for header in response.headers:
            if header.lower() not in ["date", "set-cookie", "expires", "etag", "last-modified", "content-length"]:
                content += f"{header}={response.headers[header]}"
        self.headers_hash = hashlib.sha1(content.encode("utf-8")).hexdigest()

def baseline(full_url):
    response = requests.get(full_url, verify=False, proxies=PROXIES, allow_redirects=False, timeout=10)
    return [ResponseData(response)]

def case_arbitrary_host_header(full_url, test_value):
    h = {"Host": test_value}
    response = requests.get(full_url, headers=h, verify=False, proxies=PROXIES, allow_redirects=False, timeout=10)
    return [ResponseData(response)]

def case_host_override_headers(full_url, test_value):
    results = []
    for override_header in OVERRIDE_HEADERS:
        h = {override_header: test_value}
        response = requests.get(full_url, headers=h, verify=False, proxies=PROXIES, allow_redirects=False, timeout=10)
        results.append(ResponseData(response))
    return results

def main(full_url, normal_value, test_value):
    cases_result = []
    print(colored(f"[+] Execution context:", "magenta"))
    print(f"Full URL          : {full_url}")
    print(f"Host normal value : {normal_value}")
    print(f"Host test value   : {test_value}")
    print(f"Proxy             : {PROXIES}")
    print(colored(f"[+] Send crafted requests for the different cases...", "magenta"))
    cases_result.extend(baseline(full_url))
    cases_result.extend(case_arbitrary_host_header(full_url, test_value))    
    cases_result.extend(case_arbitrary_host_header(full_url, test_value + ":test"))  
    cases_result.extend(case_host_override_headers(full_url, test_value))
    print(colored(f"[+] Results:", "magenta"))
    data = []
    data.append(["Case", "HTTP Code", "Body length", "Body hash", "Headers hash"])
    data.append(["baseline (normal request)", cases_result[0].return_code, cases_result[0].body_length, cases_result[0].body_content_hash, cases_result[0].headers_hash])
    data.append(["arbitrary_host_header (no change)", cases_result[1].return_code, cases_result[1].body_length, cases_result[1].body_content_hash, cases_result[1].headers_hash])
    data.append(["arbitrary_host_header (port as string)", cases_result[2].return_code, cases_result[2].body_length, cases_result[2].body_content_hash, cases_result[2].headers_hash])
    j = 0
    for i in range(3, len(cases_result)):
            data.append([f"host_override_headers ({OVERRIDE_HEADERS[j]})", cases_result[i].return_code, cases_result[i].body_length, cases_result[i].body_content_hash, cases_result[i].headers_hash])            
            j += 1
    print(tabulate(data,headers="firstrow",tablefmt="github"))
    print(colored(f"[!] REMINDER:", "yellow"))    
    print("As Requests module and CURL do not support sending 2 occurences of the 'Host' header then the following tests must be performed manually via BURP:")
    print("- Inject duplicate Host headers")
    print("- Add line wrapping")
    print("=> https://portswigger.net/web-security/host-header/exploiting")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Detect the presence of cases for which the HTTP request header 'Host' can be abused.")
    required_params = parser.add_argument_group("required named arguments")
    required_params.add_argument("-b", action="store", dest="full_url", help="Base URL (ex: 'https://righettod.eu').", required=True)    
    parser.add_argument("-t", action="store", dest="test_value", help="Test value for the 'Host' header (default to '5.5.5.5').", required=False, default="5.5.5.5") 
    parser.add_argument("-x", action="store", dest="proxy", help="Proxy to use for all probe requests (ex: 'http://127.0.0.1:8080', default to no proxy).", required=False, default=None) 
    args = parser.parse_args()  
    if args.proxy is not None:
        PROXIES = { "http": args.proxy, "https": args.proxy } 
    main(args.full_url, urlparse(args.full_url).netloc, args.test_value)
